@startuml Spring Security OIDC Flow

' Layout and styling directives
skinparam noteBackgroundColor #FEFECE
skinparam noteBorderColor #999999
skinparam participantBackgroundColor #FFFFFF
skinparam participantBorderColor #000000
skinparam ScotAccountServiceBackgroundColor #E0F0FF
skinparam ScotAccountServiceBorderColor #0066CC
skinparam ScotAccountClientBackgroundColor #E0FFE0
skinparam ScotAccountClientBorderColor #009900

' Layout optimization
skinparam maxMessageSize 150
skinparam wrapWidth 200
skinparam defaultFontName Arial
skinparam defaultFontSize 12
skinparam sequence {
    ArrowColor #666666
    LifeLineBorderColor #666666
    ParticipantBorderColor #666666
    ParticipantBackgroundColor #FFFFFF
    BoxBorderColor #666666
    BoxBackgroundColor #FFFFFF
}

actor "User Browser" as Browser
participant "SecurityConfig" as SecurityConfig #E0FFE0
participant "LoginController" as LoginController #E0FFE0
participant "LogoutController" as LogoutController #E0FFE0
participant "VerificationController" as VerificationController #E0FFE0
participant "HomeController" as HomeController #E0FFE0
participant "AttributeService" as AttributeService #E0FFE0
participant "CustomOAuth2AccessTokenResponseClient" as CustomTokenClient #E0FFE0
participant "OAuth2AuthorizedClientService" as OAuth2AuthorizedClientService
participant "OAuth2AuthenticationToken" as OAuth2AuthenticationToken
participant "OidcUser" as OidcUser
participant "JwtDecoder" as JwtDecoder
participant "OAuth2AccessToken" as OAuth2AccessToken
participant "ClientRegistrationRepository" as ClientRegistrationRepository
participant "OAuth2AuthorizationRequestResolver" as OAuth2AuthorizationRequestResolver
participant "SecurityFilterChain" as SecurityFilterChain
participant "CookieCsrfTokenRepository" as CookieCsrfTokenRepository
participant "ScotAccount\nAuthorization Service" as ScotAuth #E0F0FF
participant "ScotAccount\nToken Service" as ScotToken #E0F0FF
participant "ScotAccount\nAttributes Service" as ScotAttr #E0F0FF
participant "ScotAccount\nJWKS Service" as ScotJWKS #E0F0FF

' Initialization Section
== Initialization ==
SecurityConfig -> ClientRegistrationRepository: Injects ClientRegistrationRepository
SecurityConfig -> JwtDecoder: Injects JwtDecoder
SecurityConfig -> OAuth2AuthorizationRequestResolver: Defines PKCE-enabled Auth Request Resolver (Bean)
SecurityConfig -> CustomTokenClient: Defines CustomOAuth2AccessTokenResponseClient (Bean)
SecurityConfig -> SecurityFilterChain: Configures SecurityFilterChain (Bean)
SecurityConfig -> CookieCsrfTokenRepository: Configures CSRF Token Repository (Bean)
SecurityConfig -> OAuth2AuthorizedClientService: Injects OAuth2AuthorizedClientService
SecurityConfig -> AttributeService: Injects AttributeService
SecurityConfig -> LoginController: Injects OAuth2AuthorizedClientService, JwtDecoder
SecurityConfig -> LogoutController: Injects dependencies
SecurityConfig -> VerificationController: Injects OAuth2AuthorizedClientService
SecurityConfig -> HomeController: Injects OAuth2AuthorizedClientService, AttributeService
note right of SecurityConfig
  Session Configuration:
  - SessionCreationPolicy: IF_REQUIRED
  - Maximum Sessions: 1
  - Session Fixation: newSession
  - Invalid Session URL: /login?invalid
  - Expired Session URL: /login?expired
end note

' Initial Request Section
== Initial Request ==
Browser -> SecurityConfig: 1. Configure Security
SecurityConfig -> SecurityFilterChain: 2. Build Filter Chain
SecurityConfig -> OAuth2AuthorizationRequestResolver: 3. Create Auth Request Resolver
SecurityConfig -> ClientRegistrationRepository: 4. Load Client Registration
SecurityConfig -> CookieCsrfTokenRepository: 5. Setup CSRF
SecurityConfig -> CustomTokenClient: 6. Register Custom Token Client

Browser -> LoginController: 7. GET /oauth2/authorization/scotaccount
LoginController -> OAuth2AuthorizationRequestResolver: 8. Resolve Auth Request
OAuth2AuthorizationRequestResolver -> ClientRegistrationRepository: 9. Get Client Registration
LoginController -> Browser: 10. Redirect to ScotAuth

' ScotAccount Authorization Endpoint
Browser -> ScotAuth: 11. GET https://issuer.main.integration.scotaccount.service.gov.scot/authorize
note right of ScotAuth
  Headers:
  - Accept: text/html
  - Cookie: XSRF-TOKEN=<csrf_token>
  Query Params:
  - client_id=<client_id>
  - response_type=code
  - redirect_uri=https://localhost:8080/login/oauth2/code/scotaccount
  - scope=openid scotaccount.address scotaccount.gpg45.medium scotaccount.email
  - state=<state>
  - code_challenge=<challenge>
  - code_challenge_method=S256
  - nonce=<nonce>
  - response_mode=form_post
end note
ScotAuth --> Browser: 12. HTTP/1.1 302 Found (redirect with code & state)
note right of Browser
  Location: /login/oauth2/code/scotaccount?code=<authorization_code>&state=<state>
end note

' Authorization Code Return Section
== Authorization Code Return ==
Browser -> LoginController: 13. GET /login/oauth2/code/scotaccount
LoginController -> OAuth2AuthenticationToken: 14. Parse Auth Token
LoginController -> OidcUser: 15. Parse OIDC User
LoginController -> OAuth2AuthorizedClientService: 16. Load Authorized Client
LoginController -> JwtDecoder: 17. Decode Access Token
note right of LoginController
  Token Storage:
  - Access Token: OAuth2AuthorizedClient
  - ID Token: OidcUser
  - Refresh Token: OAuth2AuthorizedClient
end note
LoginController -> HomeController: 18. Redirect to Home

' ScotAccount Token Endpoint
CustomTokenClient -> ScotToken: 19. POST https://issuer.main.integration.scotaccount.service.gov.scot/token
note right of ScotToken
  Headers:
  - Content-Type: application/x-www-form-urlencoded
  - Authorization: Basic <base64(client_id:client_secret)>
  Body:
  - grant_type: authorization_code
  - code: <authorization_code>
  - redirect_uri: https://localhost:8080/login/oauth2/code/scotaccount
  - code_verifier: <pkce_verifier>
end note
ScotToken --> CustomTokenClient: 20. HTTP/1.1 200 OK
note right of CustomTokenClient
  Content-Type: application/json
  Body:
  {
    "access_token": "<access_token>",
    "id_token": "<id_token>",
    "token_type": "Bearer",
    "expires_in": 3600,
    "scope": "openid scotaccount.address scotaccount.gpg45.medium scotaccount.email",
    "refresh_token": "<refresh_token>"
  }
end note
CustomTokenClient -> OAuth2AccessToken: 21. Parse Access Token
CustomTokenClient -> JwtDecoder: 22. Decode Token Claims

' ScotAccount JWKS Endpoint
JwtDecoder -> ScotJWKS: 23. GET https://issuer.main.integration.scotaccount.service.gov.scot/jwks
note right of ScotJWKS
  Headers:
  - Accept: application/json
end note
ScotJWKS --> JwtDecoder: 24. HTTP/1.1 200 OK
note right of JwtDecoder
  Content-Type: application/json
  Body:
  {
    "keys": [
      {
        "kid": "key1",
        "kty": "RSA",
        "n": "<modulus>",
        "e": "<exponent>"
      }
    ]
  }
end note

' ScotAccount Attributes Endpoint
HomeController -> AttributeService: 25. fetchAttributes(access_token)
AttributeService -> ScotAttr: 26. GET https://issuer.main.integration.scotaccount.service.gov.scot/attributes/values
note right of ScotAttr
  Headers:
  - Authorization: Bearer <access_token>
  - Accept: application/json
end note
ScotAttr --> AttributeService: 27. HTTP/1.1 200 OK
note right of AttributeService
  Content-Type: application/json
  Body:
  {
    "$schema": "https://schema.scotaccount.service.gov.scot/external/v2/scotaccount-verified-claims",
    "iss": "https://issuer.main.integration.scotaccount.service.gov.scot/jwt",
    "sub": "<subject_id>",
    "iat": <timestamp>,
    "verified_claims": [ ... ]
  }
  Verified Claims:
  - Retrieved from ScotAccount
  - Stored in AttributeService
end note
AttributeService -> HomeController: 28. Return Verified Claims

' Verification Flow Section
== Verification Flow ==
Browser -> VerificationController: 29. GET /verify
VerificationController -> OAuth2AuthorizedClientService: 30. Load Authorized Client
VerificationController -> Browser: 31. Redirect to /oauth2/authorization/scotaccount (with scopes)

' Logout Flow Section
== Logout Flow ==
Browser -> LogoutController: 32. POST /logout
LogoutController -> OAuth2AuthenticationToken: 33. Get Auth Token
LogoutController -> OidcUser: 34. Get ID Token
LogoutController -> ScotAuth: 35. Redirect to /logout endpoint

@enduml 